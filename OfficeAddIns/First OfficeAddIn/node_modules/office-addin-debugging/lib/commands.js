// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const office_addin_cli_1 = require("office-addin-cli");
const devSettings = require("office-addin-dev-settings");
const office_addin_manifest_1 = require("office-addin-manifest");
const start_1 = require("./start");
const stop_1 = require("./stop");
function parseDevServerPort(optionValue) {
    const devServerPort = office_addin_cli_1.parseNumber(optionValue, "--dev-server-port should specify a number.");
    if (devServerPort !== undefined) {
        if (!Number.isInteger(devServerPort)) {
            throw new Error("--dev-server-port should be an integer.");
        }
        if ((devServerPort < 0) || (devServerPort > 65535)) {
            throw new Error("--dev-server-port should be between 0 and 65535.");
        }
    }
    return devServerPort;
}
function start(manifestPath, appType, command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const appTypeToDebug = start_1.parseAppType(appType || process.env.npm_package_config_app_type_to_debug || "desktop");
            const appToDebug = command.app || process.env.npm_package_config_app_to_debug;
            const app = appToDebug ? office_addin_manifest_1.parseOfficeApp(appToDebug) : undefined;
            const sourceBundleUrlComponents = new devSettings.SourceBundleUrlComponents(command.sourceBundleUrlHost, command.sourceBundleUrlPort, command.sourceBundleUrlPath, command.sourceBundleUrlExtension);
            const debuggingMethod = start_1.parseDebuggingMethod(command.debugMethod);
            const devServer = command.devServer || process.env.npm_package_scripts_dev_server;
            const devServerPort = parseDevServerPort(command.devServerPort || process.env.npm_package_config_dev_server_port);
            const enableDebugging = command.debug;
            const enableLiveReload = (command.liveReload === true);
            const packager = command.packager || process.env.npm_package_scripts_packager;
            const packagerHost = command.PackagerHost || process.env.npm_package_config_packager_host;
            const packagerPort = command.PackagerPort || process.env.npm_package_config_packager_port;
            if (appTypeToDebug === undefined) {
                throw new Error("Please specify the application type to debug.");
            }
            yield start_1.startDebugging(manifestPath, appTypeToDebug, app, debuggingMethod, sourceBundleUrlComponents, devServer, devServerPort, packager, packagerHost, packagerPort, enableDebugging, enableLiveReload);
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(`Unable to start debugging.\n${err}`);
        }
    });
}
exports.start = start;
function stop(manifestPath, command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield stop_1.stopDebugging(manifestPath);
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(`Unable to stop debugging.\n${err}`);
        }
    });
}
exports.stop = stop;
//# sourceMappingURL=commands.js.map